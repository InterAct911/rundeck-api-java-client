javadoc proofread file: ./proof-read.txt


=== reference/org/rundeck/api/package-descr.html ===
        Java client for the Rundeck API.


=== reference/org/rundeck/api/domain/package-descr.html ===
        Domain classes that are returned to the client of the API.


=== reference/org/rundeck/api/generator/package-descr.html ===


=== reference/org/rundeck/api/parser/package-descr.html ===
        Internal parsers for parsing the Rundeck responses.


=== reference/org/rundeck/api/query/package-descr.html ===


=== reference/org/rundeck/api/util/package-descr.html ===
        Some utility classes.


=== reference/packages.html ===
        <p>See the documentation of the <a href="org/rundeck/api/RundeckClient.html">RundeckClient</a> class (main entry point of the API).</p>


=== org/rundeck/api/RunJobBuilder.html ===
        Job run request builder
CONSTRUCTOR: RunJobBuilder
METHOD: build
METHOD: builder
METHOD: setAsUser
METHOD: setJobId
METHOD: setNodeFilters
METHOD: setOptions


=== org/rundeck/api/RunJob.html ===
        Job run request
METHOD: getAsUser
        Specify a user name to run the job as, must have 'runAs' permission
METHOD: getJobId
        Identifier of the job - mandatory
METHOD: getNodeFilters
        Node filters for overriding the nodes on which the job will be executed - optional. See
        {@link ... NodeFiltersBuilder}
METHOD: getOptions
        Options of the job - optional. See
        {@link ... OptionsBuilder}
        .


=== org/rundeck/api/RundeckJobsImportBuilder.html ===
        Builds a
        {@link ... RundeckJobsImport}
        
CONSTRUCTOR: RundeckJobsImportBuilder
CONSTRUCTOR: RundeckJobsImportBuilder
METHOD: build
METHOD: builder
        Create a new builder
METHOD: builder
        Create a builder initialized with an existing
        {@link ... RundeckJobsImport}
METHOD: setFileType
METHOD: setJobsImportMethod
METHOD: setProject
METHOD: setStream
METHOD: setUUIDImportBehavior


=== org/rundeck/api/RundeckJobsImport.html ===
        Request to import a set of Job definitions
METHOD: getFileType
        Return the file type
METHOD: getImportMethod
        Return the import behavior
METHOD: getProject
        Return the project name
METHOD: getStream
        Return the input stream
METHOD: getUuidImportBehavior
        Return the import behavior


=== org/rundeck/api/RundeckClientBuilder.html ===
        Builder to build a
        {@link ... RundeckClient}
        , you must specify a url, and at least one of (login, password), token, or
         sessionId.
METHOD: build
        Create the RundeckClient instance
METHOD: login
METHOD: login
METHOD: password
METHOD: sessionId
        Specify a web session ID string for authentication
METHOD: sslCertificateTrustAllowSelfSigned
        Specify whether SSL certificate trust allows self-signed certs, otherwise it will use the default
METHOD: sslHostnameVerifyAllowAll
        Specify whether SSL hostname verifier allows all, otherwise it will use the default
METHOD: systemProxyEnabled
        Specify whether to use system proxy settings, default false
METHOD: token
        Specify a Rundeck API Token string for authentication
METHOD: url
        Specify the URL
METHOD: version
        Specify another version number to use
METHOD: version
        Specify another version number to use


=== org/rundeck/api/RundeckClient.html ===
        Rundeck API client.
         <p>
         There are three methods for authentication : login-based or token-based or session-based.
         Login authentication requires
         both a "login" and a "password". Token-based requires a "token" (also called "auth-token"). See the Rundeck
         documentation for generating such a token.</p>
         <p>
             Session-based authentication allows re-use of a previous login session. See
        {@link ... testAuth()}
        .
         </p>
         <br>
         Usage : <br>
         <code>
         <pre>
         // using login-based authentication :
         RundeckClient rundeck = RundeckClient.builder()
                                   .url("http://localhost:4440")
                                   .login("admin", "admin").build();
         // or for a token-based authentication :
         RundeckClient rundeck = RundeckClient.builder()
                                   .url("http://localhost:4440")
                                   .token("PDDNKo5VE29kpk4prOUDr2rsKdRkEvsD").build();
        
         List&lt;RundeckProject&gt; projects = rundeck.getProjects();
        
         RundeckJob job = rundeck.findJob("my-project", "main-group/sub-group", "job-name");
         RundeckExecution execution = rundeck.triggerJob(job.getId(),
                                                         new OptionsBuilder().addOption("version", "1.2.0").toProperties());
        
         List&lt;RundeckExecution&gt; runningExecutions = rundeck.getRunningExecutions("my-project");
        
         rundeck.exportJobsToFile("/tmp/jobs.xml", FileType.XML, "my-project");
         rundeck.importJobs("/tmp/jobs.xml", FileType.XML);
         </pre>
         </code>
FIELD: API_ENDPOINT
        End-point of the API
FIELD: API_VERSION
        Version of the API supported
FIELD: DEFAULT_POOLING_INTERVAL
        Default value for the "pooling interval" used when running jobs/commands/scripts
FIELD: DEFAULT_POOLING_UNIT
        Default unit of the "pooling interval" used when running jobs/commands/scripts
FIELD: JOBS_IMPORT
FIELD: STORAGE_KEYS_PATH
FIELD: STORAGE_ROOT_PATH
METHOD: abortExecution
        Abort an execution (identified by the given ID). The execution should be running...
METHOD: abortExecution
        Abort an execution (identified by the given ID). The execution should be running...
METHOD: builder
        Create a builder for RundeckClient
METHOD: createProject
        Create a new project, and return the new definition
METHOD: deleteAllJobExecutions
        Delete all executions for a job specified by a job ID
METHOD: deleteApiToken
        Delete an existing token
        @return
METHOD: deleteExecution
        Delete a single execution, identified by the given ID
METHOD: deleteExecutions
        Delete a set of executions, identified by the given IDs
METHOD: deleteJob
        Delete a single job, identified by the given ID
METHOD: deleteJobs
        Delete multiple jobs, identified by the given IDs
METHOD: deleteKey
        Delete an key file
METHOD: deleteProject
        Delete a project
METHOD: deleteProjectConfig
        Set a single project configuration property value
METHOD: deleteProjectFile
        Delete a project readme.md or motd.md
METHOD: equals
METHOD: exportJob
        Export the definition of a single job, identified by the given ID
METHOD: exportJob
        Export the definition of a single job, identified by the given ID
METHOD: exportJobToFile
        Export the definition of a single job (identified by the given ID)
METHOD: exportJobToFile
        Export the definition of a single job (identified by the given ID)
METHOD: exportJobs
        Export the definitions of all jobs that belongs to the given project
METHOD: exportJobs
        Export the definitions of the jobs that belongs to the given project, and matches the given criteria (jobFilter,
         groupPath and jobIds)
METHOD: exportJobs
        Export the definitions of all jobs that belongs to the given project
METHOD: exportJobs
        Export the definitions of the jobs that belongs to the given project, and matches the given criteria (jobFilter,
         groupPath and jobIds)
METHOD: exportJobsToFile
        Export the definitions of all jobs that belongs to the given project
METHOD: exportJobsToFile
        Export the definitions of the jobs that belongs to the given project, and matches the given criteria (jobFilter,
         groupPath and jobIds)
METHOD: exportJobsToFile
        Export the definitions of all jobs that belongs to the given project
METHOD: exportJobsToFile
        Export the definitions of the jobs that belongs to the given project, and matches the given criteria (jobFilter,
         groupPath and jobIds)
METHOD: exportProject
        Convenience method to export the archive of a project to the specified file.
METHOD: exportProject
        Export the archive of a project to the specified outputstream
METHOD: findJob
        Find a job, identified by its project, group and name. Note that the groupPath is optional, as a job does not
         need to belong to a group (either pass null, or an empty string).
METHOD: generateApiToken
        Generate an API token for a user.
        @return
METHOD: generateToken
        Generate a new token and get the result page (which is the html page of the user's profile)
METHOD: getApiToken
        Return user info for an existing token
METHOD: getExecution
        Get a single execution, identified by the given ID
METHOD: getExecutionOutput
        Get the execution output of the given job
METHOD: getExecutionOutput
        Get the execution output of the given job
METHOD: getExecutionOutputForNode
        Get the execution output of the given execution on the specified node
METHOD: getExecutionOutputForNodeAndStep
        Get the execution output of the given execution for the specified step
METHOD: getExecutionOutputForStep
        Get the execution output of the given execution for the specified step
METHOD: getExecutionOutputState
        Get the execution state output sequence of the given job
METHOD: getExecutionState
        Get the execution state of the given execution
METHOD: getExecutions
        Get executions based on query parameters
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getHistory
        Get the (events) history for the given project
METHOD: getJob
        Get the definition of a single job, identified by the given ID
METHOD: getJobExecutions
        Get the executions of the given job
METHOD: getJobExecutions
        Get the executions of the given job
METHOD: getJobExecutions
        Get the executions of the given job
METHOD: getJobExecutions
        Get the executions of the given job
METHOD: getJobExecutions
        Get the executions of the given job
METHOD: getJobs
        List all jobs (for all projects)
METHOD: getJobs
        List all jobs that belongs to the given project
METHOD: getJobs
        List the jobs that belongs to the given project, and matches the given criteria (jobFilter, groupPath and jobIds)
METHOD: getKey
        Get metadata for an key file
METHOD: getLogin
METHOD: getNode
        Get the definition of a single node
METHOD: getNodes
        List all nodes (for all projects)
METHOD: getNodes
        List all nodes that belongs to the given project
METHOD: getNodes
        List nodes that belongs to the given project
METHOD: getOutput
        Get the output of a job execution
METHOD: getPassword
METHOD: getProfilePage
        Get the html page of the user's profile
METHOD: getProject
        Get the definition of a single project, identified by the given name
METHOD: getProjectConfig
        Return the configuration of a project
METHOD: getProjectConfig
        Get a single project configuration key
METHOD: getProjects
        List all projects
METHOD: getPublicKeyContent
        Get content for a public key file
METHOD: getPublicKeyContent
        Get content for a public key file
METHOD: getRunningExecutions
        Get all running executions (for all projects)
METHOD: getRunningExecutions
        Get the running executions for the given project
METHOD: getSessionID
METHOD: getSystemInfo
        Get system informations about the Rundeck server
METHOD: getToken
METHOD: getUrl
METHOD: hashCode
METHOD: importArchive
        Import a archive file to the specified project.
METHOD: importJobs
        Import the definitions of jobs, from the given input stream, using the given behavior
METHOD: importJobs
        Import the definitions of jobs, from the given input stream, using the given behavior
METHOD: listApiTokens
        List all API tokens
METHOD: listApiTokens
        List API tokens for a user.
METHOD: listKeyDirectory
        List contents of key directory
METHOD: listKeyDirectoryRoot
        List contents of root key directory
METHOD: ping
        Try to "ping" the Rundeck instance to see if it is alive
METHOD: readProjectFile
        Read contents of a project readme.md or motd.md if it exsts, or return null
METHOD: runAdhocCommand
        Run an ad-hoc command, and wait until its execution is finished (or aborted) to return. We will poll the Rundeck
         server at regular interval (every 5 seconds) to know if the execution is finished (or aborted) or is still
         running. The command will be dispatched to nodes, accordingly to the nodeFilters parameter.
METHOD: runAdhocCommand
        Run an ad-hoc command, and wait until its execution is finished (or aborted) to return. We will poll the Rundeck
         server at regular interval (configured by the poolingInterval/poolingUnit couple) to know if the execution is
         finished (or aborted) or is still running. The command will be dispatched to nodes, accordingly to the
         nodeFilters parameter.
METHOD: runAdhocScript
        Run an ad-hoc script, and wait until its execution is finished (or aborted) to return. We will poll the Rundeck
         server at regular interval (every 5 seconds) to know if the execution is finished (or aborted) or is still
         running. The script will be dispatched to nodes, accordingly to the nodeFilters parameter.
METHOD: runAdhocScript
        Run an ad-hoc script read from a file, and wait until its execution is finished (or aborted) to return. We will
         poll the Rundeck server at regular interval (configured by the poolingInterval/poolingUnit couple) to know if the
         execution is finished (or aborted) or is still running. The script will be dispatched to nodes, accordingly to
         the nodeFilters parameter.
METHOD: runAdhocScript
        Run an ad-hoc script, and wait until its execution is finished (or aborted) to return. We will poll the Rundeck
         server at regular interval (configured by the poolingInterval/poolingUnit couple) to know if the execution is
         finished (or aborted) or is still running. The script will be dispatched to nodes, accordingly to the nodeFilters
         parameter.
METHOD: runJob
        Run a Rundeck job (identified by the given ID), and wait until its execution is finished (or aborted) to return.
         We will poll the Rundeck server at regular interval (every 5 seconds) to know if the execution is finished (or
         aborted) or is still running.
METHOD: runJob
        Run a Rundeck job (identified by the given ID), and wait until its execution is finished (or aborted) to return.
         We will poll the Rundeck server at regular interval (configured by the poolingInterval/poolingUnit couple) to
         know if the execution is finished (or aborted) or is still running.
METHOD: setProjectConfig
        Set a single project configuration property value
METHOD: setProjectConfig
        Return the configuration of a project
METHOD: storeKey
        Store an key file
METHOD: storeProjectFile
        Store contents to a project readme.md or motd.md
METHOD: testAuth
        Test the authentication on the Rundeck instance.
METHOD: toString
METHOD: triggerAdhocCommand
        Trigger the execution of an ad-hoc command, and return immediately (without waiting the end of the execution).
         The command will be dispatched to nodes, accordingly to the nodeFilters parameter.
METHOD: triggerAdhocScript
        Trigger the execution of an ad-hoc script, and return immediately (without waiting the end of the execution). The
         script will be dispatched to nodes, accordingly to the nodeFilters parameter.
METHOD: triggerAdhocScript
        Trigger the execution of an ad-hoc script read from a file, and return immediately (without waiting the end of
         the execution). The script will be dispatched to nodes, accordingly to the nodeFilters parameter.
METHOD: triggerJob
        Trigger the execution of a Rundeck job (identified by the given ID), and return immediately (without waiting the
         end of the job execution)


=== org/rundeck/api/RundeckClient.Version.html ===
        Supported version numbers
ENUM: V10
ENUM: V11
ENUM: V12
ENUM: V13
ENUM: V5
ENUM: V6
ENUM: V7
ENUM: V8
ENUM: V9
METHOD: getVersionNumber
METHOD: valueOf
METHOD: values


=== org/rundeck/api/RundeckApiException.html ===
        A generic (unchecked) exception when using the Rundeck API
CONSTRUCTOR: RundeckApiException
CONSTRUCTOR: RundeckApiException


=== org/rundeck/api/RundeckApiException.RundeckApiAuthException.html ===
        Specific authentication-related error (either login or token).
CONSTRUCTOR: RundeckApiException.RundeckApiAuthException
CONSTRUCTOR: RundeckApiException.RundeckApiAuthException


=== org/rundeck/api/RundeckApiException.RundeckApiLoginException.html ===
        Specific authentication-related error (in case of login-based authentication)
CONSTRUCTOR: RundeckApiException.RundeckApiLoginException
CONSTRUCTOR: RundeckApiException.RundeckApiLoginException


=== org/rundeck/api/RundeckApiException.RundeckApiTokenException.html ===
        Specific authentication-related error (in case of token-based authentication)
CONSTRUCTOR: RundeckApiException.RundeckApiTokenException
CONSTRUCTOR: RundeckApiException.RundeckApiTokenException


=== org/rundeck/api/RundeckApiException.RundeckApiHttpStatusException.html ===
        Error due to unexpected HTTP status
CONSTRUCTOR: RundeckApiException.RundeckApiHttpStatusException
CONSTRUCTOR: RundeckApiException.RundeckApiHttpStatusException
METHOD: getStatusCode


=== org/rundeck/api/RundeckApiException.RundeckApiHttpContentTypeException.html ===
        Error due to unexpected HTTP content-type
CONSTRUCTOR: RundeckApiException.RundeckApiHttpContentTypeException
CONSTRUCTOR: RundeckApiException.RundeckApiHttpContentTypeException
CONSTRUCTOR: RundeckApiException.RundeckApiHttpContentTypeException
METHOD: getContentType
METHOD: getRequiredContentType


=== org/rundeck/api/RunAdhocScriptBuilder.html ===
        A builder to build a
        {@link ... RunAdhocScript}
        , use the
        {@link ... builder()}
        to build a builder, then
        {@link ... build()}
        to build an RunAdhocScript
CONSTRUCTOR: RunAdhocScriptBuilder
METHOD: build
METHOD: builder
        Create a new builder
METHOD: builder
        Create a builder initialized with an existing
        {@link ... RunAdhocScript}
METHOD: setArgString
METHOD: setAsUser
METHOD: setInterpreterArgsQuoted
METHOD: setNodeFilters
METHOD: setNodeKeepgoing
METHOD: setNodeThreadcount
METHOD: setProject
METHOD: setScript
METHOD: setScriptInterpreter


=== org/rundeck/api/RunAdhocScript.html ===
        An adhoc script to be executed by Rundeck
METHOD: getArgString
        Arguments to the script
METHOD: getInterpreterArgsQuoted
        If true, quote the script filepath and args to the script interpreter.
METHOD: getScript
        InputStream for reading the script to be executed - mandatory
METHOD: getScriptInterpreter
        Command string to invoke the script with arguments


=== org/rundeck/api/RunAdhocCommandBuilder.html ===
        Builder for adhoc command request
CONSTRUCTOR: RunAdhocCommandBuilder
METHOD: build
METHOD: builder
METHOD: setAsUser
METHOD: setCommand
METHOD: setNodeFilters
METHOD: setNodeKeepgoing
METHOD: setNodeThreadcount
METHOD: setProject


=== org/rundeck/api/RunAdhocCommand.html ===
        A command to execute
METHOD: getCommand
        Command to executed


=== org/rundeck/api/RunAdhoc.html ===
        Super interface for adhoc executions
METHOD: getAsUser
        Specify a user name to run the job as, must have 'runAs' permission
METHOD: getNodeFilters
        Filters for selecting nodes on which the command will be executed. See
        {@link ... NodeFiltersBuilder}
METHOD: getNodeKeepgoing
        if true, continue executing on other nodes even if some fail - optional
METHOD: getNodeThreadcount
        Thread count to use (for parallelizing when running on multiple nodes) - optional
METHOD: getProject
        Project name, required


=== org/rundeck/api/OptionsBuilder.html ===
        Builder for job options
CONSTRUCTOR: OptionsBuilder
        Build a new instance. Use
        {@link ... addOption(Object, Object)}
        to add some options, and then
        {@link ... toProperties()}
        when you're done !
METHOD: addOption
        Add an option
METHOD: toProperties


=== org/rundeck/api/NodeFiltersBuilder.html ===
        Builder for node filters
CONSTRUCTOR: NodeFiltersBuilder
        Build a new instance. At the end, use
        {@link ... toProperties()}
        .
METHOD: excludeHostname
        Exclude nodes matching the given hostname
METHOD: excludeName
        Exclude nodes matching the given name
METHOD: excludeOsArch
        Exclude nodes matching the given OS-arch
METHOD: excludeOsFamily
        Exclude nodes matching the given OS-family
METHOD: excludeOsName
        Exclude nodes matching the given OS-name
METHOD: excludeOsVersion
        Exclude nodes matching the given OS-version
METHOD: excludePrecedence
        Whether exclusion filters take precedence (default to yes).
METHOD: excludeTags
        Exclude nodes matching the given tags
METHOD: excludeType
        Exclude nodes matching the given type
METHOD: hostname
        Include nodes matching the given hostname
METHOD: name
        Include nodes matching the given name
METHOD: osArch
        Include nodes matching the given OS-arch
METHOD: osFamily
        Include nodes matching the given OS-family
METHOD: osName
        Include nodes matching the given OS-name
METHOD: osVersion
        Include nodes matching the given OS-version
METHOD: tags
        Include nodes matching the given tags
METHOD: toProperties
METHOD: type
        Include nodes matching the given type


=== org/rundeck/api/FileType.html ===
        All supported types of files.
ENUM: XML
ENUM: YAML
METHOD: valueOf
METHOD: values


=== org/rundeck/api/DefaultJobsImport.html ===
        $INTERFACE is ... User: greg Date: 8/6/13 Time: 10:18 AM
CONSTRUCTOR: DefaultJobsImport
METHOD: getFileType
METHOD: getImportMethod
METHOD: getProject
METHOD: getStream
METHOD: getUuidImportBehavior
METHOD: setFileType
METHOD: setImportMethod
METHOD: setProject
METHOD: setStream
METHOD: setUuidImportBehavior


=== org/rundeck/api/domain/WorkflowStepState.html ===
        Represents the state of a step in a workflow
CONSTRUCTOR: WorkflowStepState
METHOD: getNodeStates
        Return the state of each target node if this step runs on each target node
METHOD: getSubWorkflow
        Return sub workflow if this step has one
METHOD: isNodeStep
        Return true if this step runs on each target node
METHOD: setNodeStates
METHOD: setNodeStep
METHOD: setSubWorkflow


=== org/rundeck/api/domain/WorkflowStepContextState.html ===
        A state for a particular step
CONSTRUCTOR: WorkflowStepContextState
METHOD: getStepContextId
        The context id for the step in the form "#[/#[/#[...]]]" where "#" is a number
METHOD: getStepNum
        The step number of this step in the current workflow, 1 indexed.
METHOD: setStepContextId
METHOD: setStepNum


=== org/rundeck/api/domain/WorkflowState.html ===
        Represents the state of a workflow of steps
CONSTRUCTOR: WorkflowState
METHOD: getStepCount
        Return the number of steps in this workflow
METHOD: getSteps
        Return the list of steps for this workflow
METHOD: getTargetNodes
        Identify the target nodes of this workflow
METHOD: setStepCount
METHOD: setSteps
METHOD: setTargetNodes


=== org/rundeck/api/domain/StorageResource.html ===
        StorageResource represents a directory or a file
METHOD: getDirectoryContents
        Return the list of directory contents if this is a directory
METHOD: getMetadata
        Return the metadata for this file if this is a file
METHOD: getName
        Return the file name if this is a file
METHOD: getPath
        Return the storage path for this resource
METHOD: getUrl
        Return the URL for this resource
METHOD: isDirectory
        Return true if this is a directory, false if this is a file


=== org/rundeck/api/domain/RundeckWFExecState.html ===
        An execution state for a workflow or node step
ENUM: ABORTED
        Execution was aborted
ENUM: FAILED
        Finished with a failure
ENUM: NODE_MIXED
        Mixed states among nodes
ENUM: NODE_PARTIAL_SUCCEEDED
        Partial success for some nodes
ENUM: NOT_STARTED
        After waiting the execution did not start
ENUM: RUNNING
        Currently running
ENUM: RUNNING_HANDLER
        Running error handler
ENUM: SUCCEEDED
        Finished running successfully
ENUM: WAITING
        Waiting to start running
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/RundeckToken.html ===
        RundeckToken is ...
CONSTRUCTOR: RundeckToken
CONSTRUCTOR: RundeckToken
METHOD: getToken
METHOD: getUser
METHOD: setToken
METHOD: setUser


=== org/rundeck/api/domain/RundeckSystemInfo.html ===
        Represents the Rundeck system info
CONSTRUCTOR: RundeckSystemInfo
METHOD: equals
METHOD: getActiveThreads
METHOD: getBaseDir
METHOD: getBuild
METHOD: getCpuLoadAverage
METHOD: getDate
METHOD: getFreeMemoryInBytes
METHOD: getJvmName
METHOD: getJvmVendor
METHOD: getJvmVersion
METHOD: getMaxMemoryInBytes
METHOD: getNode
METHOD: getOsArch
METHOD: getOsName
METHOD: getOsVersion
METHOD: getRunningJobs
METHOD: getStartDate
METHOD: getTotalMemoryInBytes
METHOD: getUptime
METHOD: getUptimeInMillis
METHOD: getVersion
METHOD: hashCode
METHOD: setActiveThreads
METHOD: setBaseDir
METHOD: setBuild
METHOD: setCpuLoadAverage
METHOD: setDate
METHOD: setFreeMemoryInBytes
METHOD: setJvmName
METHOD: setJvmVendor
METHOD: setJvmVersion
METHOD: setMaxMemoryInBytes
METHOD: setNode
METHOD: setOsArch
METHOD: setOsName
METHOD: setOsVersion
METHOD: setRunningJobs
METHOD: setStartDate
METHOD: setTotalMemoryInBytes
METHOD: setUptimeInMillis
METHOD: setVersion
METHOD: toString


=== org/rundeck/api/domain/RundeckProject.html ===
        Represents a Rundeck project
CONSTRUCTOR: RundeckProject
METHOD: equals
METHOD: getDescription
METHOD: getName
METHOD: getProjectConfig
METHOD: getResourceModelProviderUrl
METHOD: hashCode
METHOD: setDescription
METHOD: setName
METHOD: setProjectConfig
METHOD: setResourceModelProviderUrl
METHOD: toString


=== org/rundeck/api/domain/RundeckOutputEntry.html ===
        Represents a Rundeck output entry
CONSTRUCTOR: RundeckOutputEntry
METHOD: equals
METHOD: getAbsoluteTime
METHOD: getCommand
METHOD: getLevel
METHOD: getMessage
METHOD: getMetadata
METHOD: getNode
METHOD: getTime
METHOD: getType
        type of entry
METHOD: getUser
METHOD: hashCode
METHOD: setAbsoluteTime
METHOD: setCommand
METHOD: setLevel
METHOD: setMessage
METHOD: setMetadata
METHOD: setNode
METHOD: setTime
METHOD: setType
METHOD: setUser
METHOD: toString


=== org/rundeck/api/domain/RundeckOutputEntry.RundeckLogLevel.html ===
ENUM: CONFIG
ENUM: DEBUG
ENUM: ERROR
ENUM: FINEST
ENUM: INFO
ENUM: NORMAL
ENUM: SEVERE
ENUM: VERBOSE
ENUM: WARNING
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/RundeckOutput.html ===
        Represents a Rundeck output
CONSTRUCTOR: RundeckOutput
METHOD: addLogEntry
METHOD: equals
METHOD: getExecDuration
METHOD: getExecutionId
METHOD: getFilterNode
METHOD: getFilterStep
        Return the step context used to filter this output
METHOD: getLastModified
METHOD: getLogEntries
METHOD: getOffset
METHOD: getPercentLoaded
METHOD: getStatus
METHOD: getTotalSize
METHOD: hashCode
METHOD: isCompleted
METHOD: isEmpty
METHOD: isExecCompleted
METHOD: isHasFailedNodes
METHOD: isUnmodified
METHOD: setCompleted
METHOD: setEmpty
METHOD: setExecCompleted
METHOD: setExecDuration
METHOD: setExecutionId
METHOD: setFilterNode
        return the node name used to filter this output
METHOD: setFilterStep
METHOD: setHasFailedNodes
METHOD: setLastModified
METHOD: setLogEntries
METHOD: setOffset
METHOD: setPercentLoaded
METHOD: setStatus
METHOD: setTotalSize
METHOD: setUnmodified
METHOD: toString


=== org/rundeck/api/domain/RundeckNodeIdentity.html ===
        Identifies a node by name
METHOD: getName
        Return the rundeck Node name


=== org/rundeck/api/domain/RundeckNode.html ===
        Represents a Rundeck node (server on which Rundeck can execute jobs and commands)
CONSTRUCTOR: RundeckNode
METHOD: equals
METHOD: getDescription
METHOD: getEditUrl
METHOD: getHostname
METHOD: getName
METHOD: getOsArch
METHOD: getOsFamily
METHOD: getOsName
METHOD: getOsVersion
METHOD: getRemoteUrl
METHOD: getTags
METHOD: getType
METHOD: getUsername
METHOD: hashCode
METHOD: setDescription
METHOD: setEditUrl
METHOD: setHostname
METHOD: setName
METHOD: setOsArch
METHOD: setOsFamily
METHOD: setOsName
METHOD: setOsVersion
METHOD: setRemoteUrl
METHOD: setTags
METHOD: setType
METHOD: setUsername
METHOD: toString


=== org/rundeck/api/domain/RundeckJobsUUIDImportBehavior.html ===
        $INTERFACE is ... User: greg Date: 1/16/14 Time: 11:38 AM
ENUM: PRESERVE
ENUM: REMOVE
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/RundeckJobsImportResult.html ===
        Result of importing some jobs into Rundeck
CONSTRUCTOR: RundeckJobsImportResult
METHOD: addFailedJob
METHOD: addSkippedJob
METHOD: addSucceededJob
METHOD: equals
METHOD: getFailedJobs
METHOD: getSkippedJobs
METHOD: getSucceededJobs
METHOD: hashCode
METHOD: toString


=== org/rundeck/api/domain/RundeckJobsImportMethod.html ===
        The behavior when importing jobs (which may already exist).
ENUM: CREATE
ENUM: SKIP
ENUM: UPDATE
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/RundeckJobDeleteBulk.html ===
        RundeckJobDeleteBulk represents the result of a bulk job delete request and contains
         a list of
        {@link ... RundeckJobDelete}
        objects.
CONSTRUCTOR: RundeckJobDeleteBulk
METHOD: getRequestCount
        The number of job delete requests processed.
METHOD: getResults
METHOD: isAllsuccessful
        True if all job delete requests were successful
METHOD: iterator
METHOD: toString


=== org/rundeck/api/domain/RundeckJobDelete.html ===
        RundeckJobDelete represents a result of a job delete request.
CONSTRUCTOR: RundeckJobDelete
METHOD: equals
METHOD: getError
        Error message if the job could not be deleted
METHOD: getErrorCode
        Error code string if there was a failure
METHOD: getId
        Job ID
METHOD: getMessage
        Success message if it was successful
METHOD: hashCode
METHOD: isSuccessful
        True if the job was successfully deleted
METHOD: setError
METHOD: setErrorCode
METHOD: setId
METHOD: setMessage
METHOD: setSuccessful
METHOD: toString


=== org/rundeck/api/domain/RundeckJob.html ===
        Represents a Rundeck job
CONSTRUCTOR: RundeckJob
METHOD: equals
METHOD: getAverageDuration
METHOD: getDescription
METHOD: getFullName
METHOD: getGroup
METHOD: getId
METHOD: getName
METHOD: getProject
METHOD: hashCode
METHOD: setAverageDuration
METHOD: setDescription
METHOD: setGroup
METHOD: setId
METHOD: setName
METHOD: setProject
METHOD: toString


=== org/rundeck/api/domain/RundeckHistory.html ===
        Represents a portion of the Rundeck (events) history
CONSTRUCTOR: RundeckHistory
METHOD: addEvent
METHOD: equals
METHOD: getCount
METHOD: getEvents
METHOD: getMax
METHOD: getOffset
METHOD: getTotal
METHOD: hashCode
METHOD: setCount
METHOD: setEvents
METHOD: setMax
METHOD: setOffset
METHOD: setTotal
METHOD: toString


=== org/rundeck/api/domain/RundeckExecutionState.html ===
        The state of an Execution
CONSTRUCTOR: RundeckExecutionState
METHOD: getAllNodes
        Return the set of all rundeck nodes targeted in this execution
METHOD: getExecutionId
        Return this execution's ID
METHOD: getNodeStates
        Return the map of node name to step state list
METHOD: setAllNodes
METHOD: setExecutionId
METHOD: setNodeStates


=== org/rundeck/api/domain/RundeckExecution.html ===
        Represents a Rundeck execution, usually triggered by an API call. An execution could be a
        {@link ... RundeckJob}
        execution or an "ad-hoc" execution.
CONSTRUCTOR: RundeckExecution
METHOD: equals
METHOD: getAbortedBy
METHOD: getArgstring
        the argument string for the execution
METHOD: getDescription
METHOD: getDuration
METHOD: getDurationInMillis
METHOD: getDurationInSeconds
METHOD: getEndedAt
METHOD: getFailedNodes
METHOD: getId
METHOD: getJob
METHOD: getProject
METHOD: getShortDuration
METHOD: getStartedAt
METHOD: getStartedBy
METHOD: getStatus
METHOD: getSuccessfulNodes
METHOD: getUrl
METHOD: hashCode
METHOD: setAbortedBy
METHOD: setArgstring
METHOD: setDescription
METHOD: setEndedAt
METHOD: setFailedNodes
METHOD: setId
METHOD: setJob
METHOD: setProject
METHOD: setStartedAt
METHOD: setStartedBy
METHOD: setStatus
METHOD: setSuccessfulNodes
METHOD: setUrl
METHOD: toString


=== org/rundeck/api/domain/RundeckExecution.ExecutionStatus.html ===
        The status of an execution
ENUM: ABORTED
ENUM: FAILED
ENUM: FAILED_WITH_RETRY
ENUM: RUNNING
ENUM: SUCCEEDED
ENUM: TIMEDOUT
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/RundeckEvent.html ===
        Represents a Rundeck event
CONSTRUCTOR: RundeckEvent
METHOD: equals
METHOD: getAbortedBy
METHOD: getDuration
METHOD: getDurationInMillis
METHOD: getDurationInSeconds
METHOD: getEndedAt
METHOD: getExecutionId
METHOD: getJobId
METHOD: getNodeSummary
METHOD: getProject
METHOD: getShortDuration
METHOD: getStartedAt
METHOD: getStatus
METHOD: getSummary
METHOD: getTitle
METHOD: getUser
METHOD: hashCode
METHOD: isAdhoc
METHOD: setAbortedBy
METHOD: setEndedAt
METHOD: setExecutionId
METHOD: setJobId
METHOD: setNodeSummary
METHOD: setProject
METHOD: setStartedAt
METHOD: setStatus
METHOD: setSummary
METHOD: setTitle
METHOD: setUser
METHOD: toString


=== org/rundeck/api/domain/RundeckEvent.NodeSummary.html ===
        Summary for nodes
CONSTRUCTOR: RundeckEvent.NodeSummary
METHOD: equals
METHOD: getFailed
METHOD: getSucceeded
METHOD: getTotal
METHOD: hashCode
METHOD: setFailed
METHOD: setSucceeded
METHOD: setTotal
METHOD: toString


=== org/rundeck/api/domain/RundeckEvent.EventStatus.html ===
        The status of an event
ENUM: ABORTED
ENUM: FAILED
ENUM: SUCCEEDED
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/RundeckAbort.html ===
        Represents an abort of a
        {@link ... RundeckExecution}
CONSTRUCTOR: RundeckAbort
METHOD: equals
METHOD: getExecution
METHOD: getStatus
METHOD: hashCode
METHOD: setExecution
METHOD: setStatus
METHOD: toString


=== org/rundeck/api/domain/RundeckAbort.AbortStatus.html ===
        The status of an abort
ENUM: ABORTED
ENUM: FAILED
ENUM: PENDING
METHOD: valueOf
METHOD: values


=== org/rundeck/api/domain/ProjectConfig.html ===
        ProjectConfig is ...
CONSTRUCTOR: ProjectConfig
CONSTRUCTOR: ProjectConfig
METHOD: addProperties
METHOD: equals
METHOD: getProperties
METHOD: hashCode
METHOD: setProperties
METHOD: setProperty
METHOD: toString


=== org/rundeck/api/domain/KeyResource.html ===
        KeyResource represents a directory or an SSH key file
METHOD: getDirectoryContents
        Return the list of SSH Key resources if this is a directory
METHOD: isPrivateKey
        Return true if this is a file and is a private SSH key file.


=== org/rundeck/api/domain/DeleteExecutionsResponse.html ===
        DeleteExecutionsResponse is ...
CONSTRUCTOR: DeleteExecutionsResponse
METHOD: getFailedCount
METHOD: getFailures
METHOD: getRequestCount
METHOD: getSuccessCount
METHOD: isAllsuccessful
METHOD: setAllsuccessful
METHOD: setFailedCount
METHOD: setFailures
METHOD: setRequestCount
METHOD: setSuccessCount


=== org/rundeck/api/domain/DeleteExecutionsResponse.DeleteFailure.html ===
CONSTRUCTOR: DeleteExecutionsResponse.DeleteFailure
METHOD: getExecutionId
METHOD: getMessage
METHOD: setExecutionId
METHOD: setMessage


=== org/rundeck/api/domain/ConfigProperty.html ===
        ConfigProperty is a single configuration property key and value.
CONSTRUCTOR: ConfigProperty
CONSTRUCTOR: ConfigProperty
METHOD: equals
METHOD: getKey
METHOD: getValue
METHOD: hashCode
METHOD: setKey
METHOD: setValue
METHOD: toString


=== org/rundeck/api/domain/BaseStorageResource.html ===
        BaseStorageResource is ...
CONSTRUCTOR: BaseStorageResource
METHOD: getDirectoryContents
METHOD: getMetadata
METHOD: getName
METHOD: getPath
METHOD: getUrl
METHOD: isDirectory
METHOD: setDirectory
METHOD: setDirectoryContents
METHOD: setMetadata
METHOD: setName
METHOD: setPath
METHOD: setUrl
METHOD: toString


=== org/rundeck/api/domain/BaseState.html ===
        Base execution status for a step
CONSTRUCTOR: BaseState
METHOD: getEndTime
        Time that the execution of this step finished, or null if it has not completed
METHOD: getExecutionState
        Current state of the execution
METHOD: getStartTime
        Time that the execution of this step started
METHOD: getUpdateTime
        Time that this state was last updated
METHOD: setEndTime
METHOD: setExecutionState
METHOD: setStartTime
METHOD: setUpdateTime


=== org/rundeck/api/domain/BaseKeyResource.html ===
        BaseKeyResource is ...
CONSTRUCTOR: BaseKeyResource
METHOD: from
METHOD: getDirectoryContents
METHOD: isPrivateKey
METHOD: setDirectoryContents
METHOD: setPrivateKey


=== org/rundeck/api/domain/ArchiveImport.html ===
        ArchiveImport describes the result of an
        {@link ... importArchive(String, java.io.File, boolean, boolean)}
        request.
CONSTRUCTOR: ArchiveImport
METHOD: getErrorMessages
        Return a list of error messages if unsuccessful
METHOD: isSuccessful
        Return true if successful


=== org/rundeck/api/generator/XmlDocumentGenerator.html ===
        XmlDocumentGenerator is ...
METHOD: generateXmlDocument
        Generate the XML
        {@link/org.dom4j.Node}
METHOD: generateXmlElement
        Generate the XML
        {@link/org.dom4j.Node}


=== org/rundeck/api/generator/ProjectGenerator.html ===
        ProjectGenerator is ...
CONSTRUCTOR: ProjectGenerator
METHOD: generateXmlElement


=== org/rundeck/api/generator/ProjectConfigPropertyGenerator.html ===
        ProjectConfigPropertyGenerator generates a
        &lt;property/&gt;
        element representing a configuration property.
CONSTRUCTOR: ProjectConfigPropertyGenerator
METHOD: generateXmlElement


=== org/rundeck/api/generator/ProjectConfigGenerator.html ===
        ProjectConfigGenerator is ...
CONSTRUCTOR: ProjectConfigGenerator
METHOD: generateXmlElement


=== org/rundeck/api/generator/DeleteExecutionsGenerator.html ===
        DeleteExecutionsGenerator is ...
CONSTRUCTOR: DeleteExecutionsGenerator
METHOD: generateXmlElement
METHOD: getExecutionIds
METHOD: setExecutionIds


=== org/rundeck/api/generator/BaseDocGenerator.html ===
        BaseDocGenerator generates a document using the element as the root.
CONSTRUCTOR: BaseDocGenerator
METHOD: generateXmlDocument


=== org/rundeck/api/parser/XmlNodeParser.html ===
        Interface to be implemented for parsers that handle XML
        {@link/Node}
        s
METHOD: parseXmlNode
        Parse the given XML
        {@link/Node}


=== org/rundeck/api/parser/WorkflowStepStateParser.html ===
        $INTERFACE is ... User: greg Date: 1/17/14 Time: 12:09 PM
CONSTRUCTOR: WorkflowStepStateParser
METHOD: parse


=== org/rundeck/api/parser/WorkflowStepContextStateParser.html ===
        $INTERFACE is ... User: greg Date: 1/17/14 Time: 12:39 PM
CONSTRUCTOR: WorkflowStepContextStateParser
METHOD: parseXmlNode


=== org/rundeck/api/parser/WorkflowStateParser.html ===
        $INTERFACE is ... User: greg Date: 1/16/14 Time: 5:44 PM
CONSTRUCTOR: WorkflowStateParser
METHOD: parse
METHOD: parseDate
METHOD: parseWorkflowState
        Parse the workflow state components from the given dom node


=== org/rundeck/api/parser/SystemInfoParser.html ===
        Parser for a single
        {@link ... RundeckSystemInfo}
CONSTRUCTOR: SystemInfoParser
METHOD: parse


=== org/rundeck/api/parser/StringParser.html ===
        Parser for a single
        {@link/String}
CONSTRUCTOR: StringParser
METHOD: parse


=== org/rundeck/api/parser/StorageResourceParser.html ===
        StorageResourceParser is ...
CONSTRUCTOR: StorageResourceParser
CONSTRUCTOR: StorageResourceParser
CONSTRUCTOR: StorageResourceParser
METHOD: parse


=== org/rundeck/api/parser/SSHKeyResourceParser.html ===
        SSHKeyResourceParser is ...
CONSTRUCTOR: SSHKeyResourceParser
CONSTRUCTOR: SSHKeyResourceParser
METHOD: parse


=== org/rundeck/api/parser/RundeckTokenParser.html ===
        RundeckTokenParser is ...
CONSTRUCTOR: RundeckTokenParser
CONSTRUCTOR: RundeckTokenParser
METHOD: parse


=== org/rundeck/api/parser/ResponseParser.html ===
        Parse inputstream to some content
METHOD: parseResponse
        Parse the given content


=== org/rundeck/api/parser/ProjectParserV11.html ===
        ProjectParserV11 supports embedded "config" element.
CONSTRUCTOR: ProjectParserV11
CONSTRUCTOR: ProjectParserV11
METHOD: parse


=== org/rundeck/api/parser/ProjectParser.html ===
        Parser for a single
        {@link ... RundeckProject}
CONSTRUCTOR: ProjectParser
CONSTRUCTOR: ProjectParser
METHOD: parse


=== org/rundeck/api/parser/ProjectConfigPropertyParser.html ===
        ProjectConfigPropertyParser parses a
        &lt;property/&gt;
        element representing
         a configuration property.
CONSTRUCTOR: ProjectConfigPropertyParser
CONSTRUCTOR: ProjectConfigPropertyParser
METHOD: parse


=== org/rundeck/api/parser/ProjectConfigParser.html ===
        ProjectConfigParser parses project "config" element contents
CONSTRUCTOR: ProjectConfigParser
CONSTRUCTOR: ProjectConfigParser
METHOD: parse


=== org/rundeck/api/parser/ParserHelper.html ===
        Helper for parsing Rundeck responses
CONSTRUCTOR: ParserHelper
METHOD: loadDocument
        Load an XML
        {@link/Document}
        from the given
        {@link/InputStream}


=== org/rundeck/api/parser/PagedResultParser.html ===
        PagedResultParser extracts paging data from an xpath node, and includes the List result from a ListParser
CONSTRUCTOR: PagedResultParser
        Create a PagedResultParser
METHOD: getXpath
METHOD: parseXmlNode


=== org/rundeck/api/parser/OutputParser.html ===
CONSTRUCTOR: OutputParser
METHOD: parse


=== org/rundeck/api/parser/OutputEntryParserV5.html ===
        OutputEntryParserV5 parses message entry for API v5
CONSTRUCTOR: OutputEntryParserV5
CONSTRUCTOR: OutputEntryParserV5
METHOD: parseMessage


=== org/rundeck/api/parser/OutputEntryParser.html ===
        Parses output message content for API v6
CONSTRUCTOR: OutputEntryParser
CONSTRUCTOR: OutputEntryParser
METHOD: parse
METHOD: parseMessage
        Parse the message content


=== org/rundeck/api/parser/NodeParser.html ===
        Parser for a single
        {@link ... RundeckNode}
CONSTRUCTOR: NodeParser
CONSTRUCTOR: NodeParser
METHOD: parse


=== org/rundeck/api/parser/ListParser.html ===
        Parser for a
        {@link/List}
        of elements
CONSTRUCTOR: ListParser
METHOD: parseXmlNode


=== org/rundeck/api/parser/JobsImportResultParser.html ===
        Parser for a single
        {@link ... RundeckJobsImportResult}
CONSTRUCTOR: JobsImportResultParser
METHOD: parse


=== org/rundeck/api/parser/JobParser.html ===
        Parser for a single
        {@link ... RundeckJob}
CONSTRUCTOR: JobParser
CONSTRUCTOR: JobParser
METHOD: parse


=== org/rundeck/api/parser/IndexedWorkflowStepStateParser.html ===
        Returns a WorkflowStepContextState by looking up the given Rundeck node's state in the workflow, using the step
         context path of the "stepctx" element of the selected DOM node.
CONSTRUCTOR: IndexedWorkflowStepStateParser
METHOD: lookupContext
        look up the workflow step state for the step context, from the root workflow
METHOD: parseXmlNode


=== org/rundeck/api/parser/HistoryParser.html ===
        Parser for a single
        {@link ... RundeckHistory}
CONSTRUCTOR: HistoryParser
METHOD: parse


=== org/rundeck/api/parser/ExecutionStateParser.html ===
        $INTERFACE is ... User: greg Date: 1/16/14 Time: 5:42 PM
CONSTRUCTOR: ExecutionStateParser
METHOD: parse


=== org/rundeck/api/parser/ExecutionParser.html ===
        Parser for a single
        {@link ... RundeckExecution}
CONSTRUCTOR: ExecutionParser
CONSTRUCTOR: ExecutionParser
METHOD: parse


=== org/rundeck/api/parser/EventParser.html ===
        Parser for a single
        {@link ... RundeckEvent}
CONSTRUCTOR: EventParser
CONSTRUCTOR: EventParser
METHOD: parse


=== org/rundeck/api/parser/DeleteParser.html ===
        DeleteParser is ...
CONSTRUCTOR: DeleteParser
CONSTRUCTOR: DeleteParser
METHOD: parse


=== org/rundeck/api/parser/DeleteExecutionsResponseParser.html ===
        DeleteExecutionsResponseParser is ...
CONSTRUCTOR: DeleteExecutionsResponseParser
METHOD: parse


=== org/rundeck/api/parser/BulkDeleteParser.html ===
        BulkDeleteParser is ...
CONSTRUCTOR: BulkDeleteParser
METHOD: parse


=== org/rundeck/api/parser/BaseXpathParser.html ===
        BaseXpathParser is ...
CONSTRUCTOR: BaseXpathParser
CONSTRUCTOR: BaseXpathParser
METHOD: parse
METHOD: parseXmlNode
METHOD: selectNodeAndUnwrap
        Select appropriate node based on xpath, will automatically look for "result" top-level element and alter xpath if
         necessary
METHOD: unwrapXpath


=== org/rundeck/api/parser/BaseStateParser.html ===
        $INTERFACE is ... User: greg Date: 1/17/14 Time: 12:19 PM
CONSTRUCTOR: BaseStateParser
CONSTRUCTOR: BaseStateParser
METHOD: parse
METHOD: parseBaseState


=== org/rundeck/api/parser/ArchiveImportParser.html ===
        ArchiveImportParser is ...
CONSTRUCTOR: ArchiveImportParser
METHOD: parse


=== org/rundeck/api/parser/AbortParser.html ===
        Parser for a single
        {@link ... RundeckAbort}
CONSTRUCTOR: AbortParser
METHOD: parse


=== org/rundeck/api/query/ExecutionQuery.html ===
        ExecutionQuery contains the query parameters for the /executions api, build one with the
        {@link ... ExecutionQuery.Builder}
        class, e.g.
         using the
        {@link ... builder()}
        method.
METHOD: builder
        Create a Builder for an ExecutionQuery
METHOD: getAbortedby
METHOD: getAdhoc
METHOD: getBegin
METHOD: getDescription
METHOD: getEnd
METHOD: getExcludeGroupPath
METHOD: getExcludeGroupPathExact
METHOD: getExcludeJob
METHOD: getExcludeJobExact
METHOD: getExcludeJobIdList
METHOD: getExcludeJobList
METHOD: getGroupPath
METHOD: getGroupPathExact
METHOD: getJob
METHOD: getJobExact
METHOD: getJobIdList
METHOD: getJobList
METHOD: getProject
METHOD: getRecent
METHOD: getStatus
METHOD: getUser
METHOD: notBlank
        Return true if some parameter is set


=== org/rundeck/api/query/ExecutionQuery.Builder.html ===
        Builder for ExecutionQueries
CONSTRUCTOR: ExecutionQuery.Builder
METHOD: abortedby
        Username
METHOD: adhoc
        True to query only adhoc executions, false to query only Job executions, null for both
METHOD: begin
        Start date/time for execution completion time
METHOD: build
        Build the query
METHOD: description
        Job description match
METHOD: end
        End date/time for execution completion time
METHOD: excludeGroupPath
        Group path or super path, which will exclude any jobs within the subtree.
METHOD: excludeGroupPathExact
        Exact group path to exclude
METHOD: excludeJob
        Job name filter to exclude, which can match any part of the name
METHOD: excludeJobExact
        Job exact name filter to exclude, much match exactly
METHOD: excludeJobIdList
        List of job IDs to exclude from query
METHOD: excludeJobList
        List of job "group/name" to exclude from query
METHOD: groupPath
        Group path or super path, which will include any jobs within the subtree.
METHOD: groupPathExact
        Exact group path to include
METHOD: job
        Job name filter, which can match any part of the name
METHOD: jobExact
        Job exact name filter, much match exactly
METHOD: jobIdList
        List of job IDs to query
METHOD: jobList
        List of job "group/name" to query
METHOD: project
        Project name
METHOD: recent
        Recent time filter, in the for "XY", where X is a number, and Y
         is one of: "h" (hour), "d" (day), "w" (week), "m" (month), "y" (year)
METHOD: status
        Execution status to query
METHOD: user
        Name of username that started the execution


=== org/rundeck/api/util/ParametersUtil.html ===
        Utility class for API parameters that should be passed in URLs.
CONSTRUCTOR: ParametersUtil
METHOD: generateArgString
        Generates a Rundeck "argString" representing the given options. Format of the argString is
         <code>"-key1 value1 -key2 'value 2 with spaces'"</code>. You might want to url-encode this string...
METHOD: generateNodeFiltersString
        Generates an url-encoded string representing the given nodeFilters. Format of the string is
         <code>"filter1=value1&filter2=value2"</code>.
METHOD: urlEncode
        URL-encode the given string


=== org/rundeck/api/util/PagedResults.html ===
        PagedResults contains a List of a certain type, and paging information.
METHOD: getCount
        Number of items available in page
METHOD: getMax
        Max number of items returned in page
METHOD: getOffset
        Offset into all items
METHOD: getResults
        Results list
METHOD: getTotal
        Total items to be paged


=== org/rundeck/api/util/DocumentContentProducer.html ===
        DocumentContentProducer writes XML document to a stream
CONSTRUCTOR: DocumentContentProducer
CONSTRUCTOR: DocumentContentProducer
METHOD: writeTo


=== org/rundeck/api/util/AssertUtil.html ===
        Utility class for assertions
CONSTRUCTOR: AssertUtil
METHOD: inList
        Test if the given value is in the list
METHOD: inList
        Test if the given value is in the list
METHOD: notBlank
        Test if the given
        {@link/String}
        is blank (null, empty or only whitespace)
METHOD: notNull
        Test if the given
        {@link/Object}
        is null
